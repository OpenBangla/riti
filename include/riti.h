/* Text to put at the beginning of the generated file. Probably a license. */

#ifndef RITI_H
#define RITI_H

/* Generated with cbindgen:0.23.0 */

/* 
 * Warning, this file is autogenerated by cbindgen. Don't modify this manually.
 * Run this command to generate this file: cbindgen --config cbindgen.toml --output include/riti.h 
 */


#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

/*
 Shift modifier key.

 Used by the [`get_suggestion_for_key()`](struct.RitiContext.html#method.get_suggestion_for_key) function.
 */
constexpr static const uint8_t MODIFIER_SHIFT = (1 << 0);

/*
 AltGr modifier key.

 Used by the [`get_suggestion_for_key()`](struct.RitiContext.html#method.get_suggestion_for_key) function.
 */
constexpr static const uint8_t MODIFIER_ALT_GR = (1 << 1);

constexpr static const uint16_t VC_GRAVE = 41;

constexpr static const uint16_t VC_TILDE = 1;

constexpr static const uint16_t VC_1 = 2;

constexpr static const uint16_t VC_2 = 3;

constexpr static const uint16_t VC_3 = 4;

constexpr static const uint16_t VC_4 = 5;

constexpr static const uint16_t VC_5 = 6;

constexpr static const uint16_t VC_6 = 7;

constexpr static const uint16_t VC_7 = 8;

constexpr static const uint16_t VC_8 = 9;

constexpr static const uint16_t VC_9 = 10;

constexpr static const uint16_t VC_0 = 11;

constexpr static const uint16_t VC_EXCLAIM = 59;

constexpr static const uint16_t VC_AT = 60;

constexpr static const uint16_t VC_HASH = 61;

constexpr static const uint16_t VC_DOLLAR = 62;

constexpr static const uint16_t VC_PERCENT = 63;

constexpr static const uint16_t VC_CIRCUM = 64;

constexpr static const uint16_t VC_AMPERSAND = 65;

constexpr static const uint16_t VC_ASTERISK = 66;

constexpr static const uint16_t VC_PAREN_LEFT = 67;

constexpr static const uint16_t VC_PAREN_RIGHT = 68;

constexpr static const uint16_t VC_UNDERSCORE = 87;

constexpr static const uint16_t VC_PLUS = 88;

constexpr static const uint16_t VC_MINUS = 12;

constexpr static const uint16_t VC_EQUALS = 13;

constexpr static const uint16_t VC_A = 41110;

constexpr static const uint16_t VC_B = 41111;

constexpr static const uint16_t VC_C = 41112;

constexpr static const uint16_t VC_D = 41113;

constexpr static const uint16_t VC_E = 41114;

constexpr static const uint16_t VC_F = 41115;

constexpr static const uint16_t VC_G = 41116;

constexpr static const uint16_t VC_H = 41117;

constexpr static const uint16_t VC_I = 41118;

constexpr static const uint16_t VC_J = 41119;

constexpr static const uint16_t VC_K = 41120;

constexpr static const uint16_t VC_L = 41121;

constexpr static const uint16_t VC_M = 41122;

constexpr static const uint16_t VC_N = 41123;

constexpr static const uint16_t VC_O = 41124;

constexpr static const uint16_t VC_P = 41125;

constexpr static const uint16_t VC_Q = 41126;

constexpr static const uint16_t VC_R = 41127;

constexpr static const uint16_t VC_S = 41128;

constexpr static const uint16_t VC_T = 41129;

constexpr static const uint16_t VC_U = 41130;

constexpr static const uint16_t VC_V = 41131;

constexpr static const uint16_t VC_W = 41132;

constexpr static const uint16_t VC_X = 41133;

constexpr static const uint16_t VC_Y = 41134;

constexpr static const uint16_t VC_Z = 41135;

constexpr static const uint16_t VC_A_SHIFT = 41140;

constexpr static const uint16_t VC_B_SHIFT = 41141;

constexpr static const uint16_t VC_C_SHIFT = 41142;

constexpr static const uint16_t VC_D_SHIFT = 41143;

constexpr static const uint16_t VC_E_SHIFT = 41144;

constexpr static const uint16_t VC_F_SHIFT = 41145;

constexpr static const uint16_t VC_G_SHIFT = 41146;

constexpr static const uint16_t VC_H_SHIFT = 41147;

constexpr static const uint16_t VC_I_SHIFT = 41148;

constexpr static const uint16_t VC_J_SHIFT = 41149;

constexpr static const uint16_t VC_K_SHIFT = 41150;

constexpr static const uint16_t VC_L_SHIFT = 41151;

constexpr static const uint16_t VC_M_SHIFT = 41152;

constexpr static const uint16_t VC_N_SHIFT = 41153;

constexpr static const uint16_t VC_O_SHIFT = 41154;

constexpr static const uint16_t VC_P_SHIFT = 41155;

constexpr static const uint16_t VC_Q_SHIFT = 41156;

constexpr static const uint16_t VC_R_SHIFT = 41157;

constexpr static const uint16_t VC_S_SHIFT = 41158;

constexpr static const uint16_t VC_T_SHIFT = 41159;

constexpr static const uint16_t VC_U_SHIFT = 41160;

constexpr static const uint16_t VC_V_SHIFT = 41161;

constexpr static const uint16_t VC_W_SHIFT = 41162;

constexpr static const uint16_t VC_X_SHIFT = 41163;

constexpr static const uint16_t VC_Y_SHIFT = 41164;

constexpr static const uint16_t VC_Z_SHIFT = 41165;

constexpr static const uint16_t VC_BRACKET_LEFT = 26;

constexpr static const uint16_t VC_BRACKET_RIGHT = 27;

constexpr static const uint16_t VC_BACK_SLASH = 43;

constexpr static const uint16_t VC_BRACE_LEFT = 91;

constexpr static const uint16_t VC_BRACE_RIGHT = 92;

constexpr static const uint16_t VC_BAR = 93;

constexpr static const uint16_t VC_SEMICOLON = 39;

constexpr static const uint16_t VC_APOSTROPHE = 40;

constexpr static const uint16_t VC_COMMA = 51;

constexpr static const uint16_t VC_PERIOD = 52;

constexpr static const uint16_t VC_SLASH = 53;

constexpr static const uint16_t VC_COLON = 99;

constexpr static const uint16_t VC_QUOTE = 100;

constexpr static const uint16_t VC_LESS = 101;

constexpr static const uint16_t VC_GREATER = 102;

constexpr static const uint16_t VC_QUESTION = 103;

constexpr static const uint16_t VC_KP_DIVIDE = 3637;

constexpr static const uint16_t VC_KP_MULTIPLY = 55;

constexpr static const uint16_t VC_KP_SUBTRACT = 74;

constexpr static const uint16_t VC_KP_EQUALS = 3597;

constexpr static const uint16_t VC_KP_ADD = 78;

constexpr static const uint16_t VC_KP_ENTER = 3612;

constexpr static const uint16_t VC_KP_DECIMAL = 83;

constexpr static const uint16_t VC_KP_1 = 79;

constexpr static const uint16_t VC_KP_2 = 80;

constexpr static const uint16_t VC_KP_3 = 81;

constexpr static const uint16_t VC_KP_4 = 75;

constexpr static const uint16_t VC_KP_5 = 76;

constexpr static const uint16_t VC_KP_6 = 77;

constexpr static const uint16_t VC_KP_7 = 71;

constexpr static const uint16_t VC_KP_8 = 72;

constexpr static const uint16_t VC_KP_9 = 73;

constexpr static const uint16_t VC_KP_0 = 82;

/*
 Config struct for configuring RitiContext.
 */
struct Config;

/*
 Context handle used for libRiti IM APIs
 */
struct RitiContext;

/*
 Suggestions which are intended to be shown by the IM's candidate window.
 Suggestion is of two variants, the 'Full' one includes a list of suggestion and
 the 'Single' one is just a String.
 */
struct Suggestion;

extern "C" {

/*
 Creates a new instance of RitiContext with a Config which is properly
 populated using `riti_config_set_*` set of functions.
 */
RitiContext *riti_context_new_with_config(const Config *ptr);

void riti_context_free(RitiContext *ptr);

Suggestion *riti_get_suggestion_for_key(RitiContext *ptr,
                                        uint16_t key,
                                        uint8_t modifier);

/*
 A candidate of the suggestion list was committed.

 `index`: index of the candidate.

 This function will end the ongoing input session.
 */
void riti_context_candidate_committed(RitiContext *ptr, uintptr_t index);

/*
 Update the suggestion making engine. This would also look for changes
 in layout selection and AutoCorrect database.
 */
void riti_context_update_engine(RitiContext *ptr, const Config *config);

/*
 Checks if there is an ongoing input session.
 */
bool riti_context_ongoing_input_session(RitiContext *ptr);

/*
 Finish the ongoing input session if any.
 */
void riti_context_finish_input_session(RitiContext *ptr);

/*
 A BackSpace event.

 Returns a new `suggestion` after applying the BackSpace event.

 If the `ctrl` parameter is true then it deletes the whole word
 in composition currently and ends the ongoing input session.

 If the internal buffer becomes empty, this function will
 end the ongoing input session.
 */
Suggestion *riti_context_backspace_event(RitiContext *ptr, bool ctrl);

void riti_suggestion_free(Suggestion *ptr);

/*
 Get the suggestion of the `index` from suggestions.
 */
char *riti_suggestion_get_suggestion(const Suggestion *ptr, uintptr_t index);

/*
 Get the only suggestion of the *lonely* `Suggestion`.
 */
char *riti_suggestion_get_lonely_suggestion(const Suggestion *ptr);

char *riti_suggestion_get_auxiliary_text(const Suggestion *ptr);

/*
 Get the pre-edit text from the list of the `index'.

 This returns the lone suggestion if the suggestion is a lonely one.

 The main purpose of the function is to convert the returning suggestion into
 the ANSI encoding if it was specified when the instance of this `Suggestion`
 was created.
 */
char *riti_suggestion_get_pre_edit_text(const Suggestion *ptr, uintptr_t index);

/*
 Free the allocated string.
 */
void riti_string_free(char *ptr);

/*
 Returns index of the suggestion, which was previously selected.
 */
uintptr_t riti_suggestion_previously_selected_index(const Suggestion *ptr);

uintptr_t riti_suggestion_get_length(const Suggestion *ptr);

/*
 Returns `true` when the `Suggestion` struct is a **lonely** one, otherwise returns `false`.

 A *lonely* `Suggestion` struct means that the struct has only one suggestion.
 */
bool riti_suggestion_is_lonely(const Suggestion *ptr);

bool riti_suggestion_is_empty(const Suggestion *ptr);

/*
 Creates a new instance of Config which is used to initialize
 and to control the configuration of RitiContext.

 This function creates an instance of Config in an initial
 state which can't be used before populating the Config using
 `riti_config_set_*` set of functions.
 */
Config *riti_config_new();

/*
 Free the allocated Config struct.
 */
void riti_config_free(Config *ptr);

void riti_config_set_layout_file(Config *ptr, const char *path);

void riti_config_set_database_dir(Config *ptr, const char *path);

void riti_config_set_suggestion_include_english(Config *ptr, bool option);

void riti_config_set_phonetic_suggestion(Config *ptr, bool option);

void riti_config_set_fixed_suggestion(Config *ptr, bool option);

void riti_config_set_fixed_auto_vowel(Config *ptr, bool option);

void riti_config_set_fixed_auto_chandra(Config *ptr, bool option);

void riti_config_set_fixed_traditional_kar(Config *ptr, bool option);

void riti_config_set_fixed_old_reph(Config *ptr, bool option);

void riti_config_set_fixed_numpad(Config *ptr, bool option);

void riti_config_set_fixed_old_kar_order(Config *ptr, bool option);

void riti_config_set_ansi_encoding(Config *ptr, bool option);

void riti_config_set_smart_quote(Config *ptr, bool option);

} // extern "C"

#endif // RITI_H
