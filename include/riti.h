/* Text to put at the beginning of the generated file. Probably a license. */

#ifndef RITI_H
#define RITI_H

/* Generated with cbindgen:0.27.0 */

/* 
 * Warning, this file is autogenerated by cbindgen. Don't modify this manually.
 * Run this command to generate this file: cbindgen --config cbindgen.toml --output include/riti.h 
 */


#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/*
 Shift modifier key.

 Used by the [`get_suggestion_for_key()`](struct.RitiContext.html#method.get_suggestion_for_key) function.
 */
#define MODIFIER_SHIFT (1 << 0)

/*
 AltGr modifier key.

 Used by the [`get_suggestion_for_key()`](struct.RitiContext.html#method.get_suggestion_for_key) function.
 */
#define MODIFIER_ALT_GR (1 << 1)

#define VC_GRAVE 41

#define VC_TILDE 1

#define VC_1 2

#define VC_2 3

#define VC_3 4

#define VC_4 5

#define VC_5 6

#define VC_6 7

#define VC_7 8

#define VC_8 9

#define VC_9 10

#define VC_0 11

#define VC_EXCLAIM 59

#define VC_AT 60

#define VC_HASH 61

#define VC_DOLLAR 62

#define VC_PERCENT 63

#define VC_CIRCUM 64

#define VC_AMPERSAND 65

#define VC_ASTERISK 66

#define VC_PAREN_LEFT 67

#define VC_PAREN_RIGHT 68

#define VC_UNDERSCORE 87

#define VC_PLUS 88

#define VC_MINUS 12

#define VC_EQUALS 13

#define VC_A 41110

#define VC_B 41111

#define VC_C 41112

#define VC_D 41113

#define VC_E 41114

#define VC_F 41115

#define VC_G 41116

#define VC_H 41117

#define VC_I 41118

#define VC_J 41119

#define VC_K 41120

#define VC_L 41121

#define VC_M 41122

#define VC_N 41123

#define VC_O 41124

#define VC_P 41125

#define VC_Q 41126

#define VC_R 41127

#define VC_S 41128

#define VC_T 41129

#define VC_U 41130

#define VC_V 41131

#define VC_W 41132

#define VC_X 41133

#define VC_Y 41134

#define VC_Z 41135

#define VC_A_SHIFT 41140

#define VC_B_SHIFT 41141

#define VC_C_SHIFT 41142

#define VC_D_SHIFT 41143

#define VC_E_SHIFT 41144

#define VC_F_SHIFT 41145

#define VC_G_SHIFT 41146

#define VC_H_SHIFT 41147

#define VC_I_SHIFT 41148

#define VC_J_SHIFT 41149

#define VC_K_SHIFT 41150

#define VC_L_SHIFT 41151

#define VC_M_SHIFT 41152

#define VC_N_SHIFT 41153

#define VC_O_SHIFT 41154

#define VC_P_SHIFT 41155

#define VC_Q_SHIFT 41156

#define VC_R_SHIFT 41157

#define VC_S_SHIFT 41158

#define VC_T_SHIFT 41159

#define VC_U_SHIFT 41160

#define VC_V_SHIFT 41161

#define VC_W_SHIFT 41162

#define VC_X_SHIFT 41163

#define VC_Y_SHIFT 41164

#define VC_Z_SHIFT 41165

#define VC_BRACKET_LEFT 26

#define VC_BRACKET_RIGHT 27

#define VC_BACK_SLASH 43

#define VC_BRACE_LEFT 91

#define VC_BRACE_RIGHT 92

#define VC_BAR 93

#define VC_SEMICOLON 39

#define VC_APOSTROPHE 40

#define VC_COMMA 51

#define VC_PERIOD 52

#define VC_SLASH 53

#define VC_COLON 99

#define VC_QUOTE 100

#define VC_LESS 101

#define VC_GREATER 102

#define VC_QUESTION 103

#define VC_KP_DIVIDE 3637

#define VC_KP_MULTIPLY 55

#define VC_KP_SUBTRACT 74

#define VC_KP_EQUALS 3597

#define VC_KP_ADD 78

#define VC_KP_ENTER 3612

#define VC_KP_DECIMAL 83

#define VC_KP_1 79

#define VC_KP_2 80

#define VC_KP_3 81

#define VC_KP_4 75

#define VC_KP_5 76

#define VC_KP_6 77

#define VC_KP_7 71

#define VC_KP_8 72

#define VC_KP_9 73

#define VC_KP_0 82

/*
 Config struct for configuring RitiContext.
 */
typedef struct Config Config;

/*
 Context handle used for libRiti IM APIs
 */
typedef struct RitiContext RitiContext;

/*
 Suggestions which are intended to be shown by the IM's candidate window.
 Suggestion is of two variants, the 'Full' one includes a list of suggestion and
 the 'Single' one is just a String.
 */
typedef struct Suggestion Suggestion;

/*
 Creates a new instance of RitiContext with a Config which is properly
 populated using `riti_config_set_*` set of functions.
 */
struct RitiContext *riti_context_new_with_config(const struct Config *ptr);

void riti_context_free(struct RitiContext *ptr);

/*
 Generates suggestion for `key` press.

 `modifier`: state of modifier keys
 `selection`: previously selected user selection index if available otherwise `0`.
 It is used to preserve user's candidate selection if the key is a punctuation character in Phonetic method.
 */
struct Suggestion *riti_get_suggestion_for_key(struct RitiContext *ptr,
                                               uint16_t key,
                                               uint8_t modifier,
                                               uint8_t selection);

/*
 A candidate of the suggestion list was committed.

 `index`: index of the candidate.

 This function will end the ongoing input session.
 */
void riti_context_candidate_committed(struct RitiContext *ptr, uintptr_t index);

/*
 Update the suggestion making engine. This would also look for changes
 in layout selection and AutoCorrect database.
 */
void riti_context_update_engine(struct RitiContext *ptr,
                                const struct Config *config);

/*
 Checks if there is an ongoing input session.
 */
bool riti_context_ongoing_input_session(struct RitiContext *ptr);

/*
 Finish the ongoing input session if any.
 */
void riti_context_finish_input_session(struct RitiContext *ptr);

/*
 A BackSpace event.

 Returns a new `suggestion` after applying the BackSpace event.

 If the `ctrl` parameter is true then it deletes the whole word
 in composition currently and ends the ongoing input session.

 If the internal buffer becomes empty, this function will
 end the ongoing input session.
 */
struct Suggestion *riti_context_backspace_event(struct RitiContext *ptr,
                                                bool ctrl);

void riti_suggestion_free(struct Suggestion *ptr);

/*
 Get the suggestion of the `index` from suggestions.
 */
char *riti_suggestion_get_suggestion(const struct Suggestion *ptr,
                                     uintptr_t index);

/*
 Get the only suggestion of the *lonely* `Suggestion`.
 */
char *riti_suggestion_get_lonely_suggestion(const struct Suggestion *ptr);

char *riti_suggestion_get_auxiliary_text(const struct Suggestion *ptr);

/*
 Get the pre-edit text from the list of the `index'.

 This returns the lone suggestion if the suggestion is a lonely one.

 The main purpose of the function is to convert the returning suggestion into
 the ANSI encoding if it was specified when the instance of this `Suggestion`
 was created.
 */
char *riti_suggestion_get_pre_edit_text(const struct Suggestion *ptr,
                                        uintptr_t index);

/*
 Free the allocated string.
 */
void riti_string_free(char *ptr);

/*
 Returns index of the suggestion, which was previously selected.
 */
uintptr_t riti_suggestion_previously_selected_index(const struct Suggestion *ptr);

uintptr_t riti_suggestion_get_length(const struct Suggestion *ptr);

/*
 Returns `true` when the `Suggestion` struct is a **lonely** one, otherwise returns `false`.

 A *lonely* `Suggestion` struct means that the struct has only one suggestion.
 */
bool riti_suggestion_is_lonely(const struct Suggestion *ptr);

bool riti_suggestion_is_empty(const struct Suggestion *ptr);

/*
 Creates a new instance of Config which is used to initialize
 and to control the configuration of RitiContext.

 This function creates an instance of Config in an initial
 state which can't be used before populating the Config using
 `riti_config_set_*` set of functions.
 */
struct Config *riti_config_new(void);

/*
 Free the allocated Config struct.
 */
void riti_config_free(struct Config *ptr);

void riti_config_set_layout_file(struct Config *ptr, const char *path);

void riti_config_set_database_dir(struct Config *ptr, const char *path);

void riti_config_set_suggestion_include_english(struct Config *ptr,
                                                bool option);

void riti_config_set_phonetic_suggestion(struct Config *ptr, bool option);

void riti_config_set_fixed_suggestion(struct Config *ptr, bool option);

void riti_config_set_fixed_auto_vowel(struct Config *ptr, bool option);

void riti_config_set_fixed_auto_chandra(struct Config *ptr, bool option);

void riti_config_set_fixed_traditional_kar(struct Config *ptr, bool option);

void riti_config_set_fixed_old_reph(struct Config *ptr, bool option);

void riti_config_set_fixed_numpad(struct Config *ptr, bool option);

void riti_config_set_fixed_old_kar_order(struct Config *ptr, bool option);

void riti_config_set_ansi_encoding(struct Config *ptr, bool option);

void riti_config_set_smart_quote(struct Config *ptr, bool option);

#endif  /* RITI_H */
